---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/5/16 0016 13:59
---
require("socket")
local https = require("ssl.https")
local cjson = require("json")

local function ToStringEx(value)
    if type(value)=='string' then
        return "\'"..value.."\'"
    else
        return tostring(value)
    end
end

local function TableToStr(t)
    if t == nil then return "" end
    local retstr= "{"

    local i = 1
    for key,value in pairs(t) do
        local signal = ","
        if i==1 then
            signal = ""
        end

        if key == i then
            retstr = retstr..signal..ToStringEx(value)
        else
            if type(key)=='number' or type(key) == 'string' then
                retstr = retstr..signal..'['..ToStringEx(key).."]="..ToStringEx(value)
            else
                if type(key)=='userdata' then
                    retstr = retstr..signal.."*s"..TableToStr(getmetatable(key)).."*e".."="..ToStringEx(value)
                else
                    retstr = retstr..signal..key.."="..ToStringEx(value)
                end
            end
        end

        i = i+1
    end

    retstr = retstr.."}"
    return retstr
end


local function main()

    local response_body = {}
    local request_body = {["key"]="hello https lua"}
    local res, code, headers, status = https.request({
        url = "https://192.168.209.1:8080/user/helloex",
        key = "/home/nopassword/cert/client.key",
        mode = "client",
        protocol = "tlsv1_2",
        verify = "peer", --<-- changed "none" to "peer"
        certificate="/home/nopassword/cert/client.pem",
        password="123456",
        cafile="/home/nopassword/cert/ca.pem",
        sink = ltn12.sink.table(response_body),
        source = ltn12.source.string(cjson.encode(request_body,{indent = true})),
        method = "POST",
        headers =  {
            ["Content-Type"] = "application/json";
            ["Content-Length"] = #(cjson.encode(request_body));
            ["Connection"] = close;
        }
    })



    ngx.log(ngx.ERR,"code:"..code.." staus:"..tostring(status))
    if code ~= 200 then
        return
    end
    for k,v  in pairs(response_body) do
        ngx.log(ngx.ERR,"bodyk:"..k.."  bodyv:"..v)
    end

    local vto = headers['to']
    ngx.log(ngx.ERR,"--------------------vto:"..vto)

    for k,v in pairs(headers) do
        ngx.log(ngx.ERR,"k:"..k.."  v:"..v)
        if k == 'set-cookie'then

            ngx.log(ngx.ERR,"typeofCooikes".. type(v))
        end
    end
    for k,v in pairs(response_body) do
        ngx.log(ngx.ERR,"k:"..k.."  v:"..v)
    end


    --[[if type(response_body) == "table" then
        ngx.log(ngx.ERR,"-----------------------------response-----------------------------"..table.concat(response_body).."-----------------")
      else
        ngx.log(ngx.ERR,"Not a table:", type(response_body))
    end
    --]]
    ngx.log(ngx.ERR, "res===========>"..res..">>-----------------body-------->>"..table.concat(response_body).."-------------------------->>"..headers['to'])


    ngx.say(code.."-------------".. tostring(status).."-----------------------res--->>"..res.."<<------------------------body--------------------->"..table.concat(response_body).."----"..headers['to'].."cooikes:" .. headers['set-cookie'])
end

--[[local function main2()
require("socket")
local ssl = require("ssl")
local params = {
  mode = "client",
  protocol = "tlsv1",
  key = "/home/nopassword/cert/client.key.unsecure",
  certificate="/home/nopassword/cert/client.pem",
  cafile="/home/nopassword/cert/ca.pem",
  verify = "peer", --<-- changed "none" to "peer"
  options = "all",
}

local conn = socket.tcp()
conn:connect("", 443)
end
--]]

main()
